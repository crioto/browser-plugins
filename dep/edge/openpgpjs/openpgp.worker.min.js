/*! OpenPGPjs.org  this is LGPL licensed code, see LICENSE/our website for more information.- v1.3.0 - 2016-03-10 */!function e(n,o,f){function p(i,t){if(!o[i]){if(!n[i]){var u="function"==typeof require&&require;if(!t&&u)return u(i,!0);if(d)return d(i,!0);throw new Error("Cannot find module '"+i+"'")}var l=o[i]={exports:{}};n[i][0].call(l.exports,function(e){var o=n[i][1][e];return p(o?o:e)},l,l.exports,e,n,o,f)}return o[i].exports}for(var d="function"==typeof require&&require,i=0;i<f.length;i++)p(f[i]);return p}({1:[function(e,n,o){function f(e){window.openpgp.crypto.random.randomBuffer.size<i&&postMessage({event:"request-seed"}),postMessage(e)}function p(e){var n=window.openpgp.packet.List.fromStructuredClone(e);return new window.openpgp.key.Key(n)}function d(e){var n=window.openpgp.packet.List.fromStructuredClone(e);return new window.openpgp.message.Message(n)}window={},Function.prototype.bind||(Function.prototype.bind=function(e){if("function"!=typeof this)throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");var n=Array.prototype.slice.call(arguments,1),o=this,f=function(){},p=function(){return o.apply(this instanceof f&&e?this:e,n.concat(Array.prototype.slice.call(arguments)))};return f.prototype=this.prototype,p.prototype=new f,p}),importScripts("openpgp.min.js");var i=4e4,t=6e4;window.openpgp.crypto.random.randomBuffer.init(t),self.onmessage=function(e){var n=null,o=null,i=e.data,t=!1;switch(i.event){case"configure":for(var u in i.config)window.openpgp.config[u]=i.config[u];break;case"seed-random":i.buf instanceof Uint8Array||(i.buf=new Uint8Array(i.buf)),window.openpgp.crypto.random.randomBuffer.set(i.buf);break;case"encrypt-message":i.keys.length||(i.keys=[i.keys]),i.keys=i.keys.map(p),window.openpgp.encryptMessage(i.keys,i.text).then(function(e){f({event:"method-return",data:e})})["catch"](function(e){f({event:"method-return",err:e.message})});break;case"sign-and-encrypt-message":i.publicKeys.length||(i.publicKeys=[i.publicKeys]),i.publicKeys=i.publicKeys.map(p),i.privateKey=p(i.privateKey),window.openpgp.signAndEncryptMessage(i.publicKeys,i.privateKey,i.text).then(function(e){f({event:"method-return",data:e})})["catch"](function(e){f({event:"method-return",err:e.message})});break;case"decrypt-message":i.privateKey=p(i.privateKey),i.message=d(i.message.packets),window.openpgp.decryptMessage(i.privateKey,i.message).then(function(e){f({event:"method-return",data:e})})["catch"](function(e){f({event:"method-return",err:e.message})});break;case"decrypt-and-verify-message":i.privateKey=p(i.privateKey),i.publicKeys.length||(i.publicKeys=[i.publicKeys]),i.publicKeys=i.publicKeys.map(p),i.message=d(i.message.packets),window.openpgp.decryptAndVerifyMessage(i.privateKey,i.publicKeys,i.message).then(function(e){f({event:"method-return",data:e})})["catch"](function(e){f({event:"method-return",err:e.message})});break;case"sign-clear-message":i.privateKeys=i.privateKeys.map(p),window.openpgp.signClearMessage(i.privateKeys,i.text).then(function(e){f({event:"method-return",data:e})})["catch"](function(e){f({event:"method-return",err:e.message})});break;case"verify-clear-signed-message":i.publicKeys.length||(i.publicKeys=[i.publicKeys]),i.publicKeys=i.publicKeys.map(p);var l=window.openpgp.packet.List.fromStructuredClone(i.message.packets);i.message=new window.openpgp.cleartext.CleartextMessage(i.message.text,l),window.openpgp.verifyClearSignedMessage(i.publicKeys,i.message).then(function(e){f({event:"method-return",data:e})})["catch"](function(e){f({event:"method-return",err:e.message})});break;case"generate-key-pair":window.openpgp.generateKeyPair(i.options).then(function(e){e.key=e.key.toPacketlist(),f({event:"method-return",data:e})})["catch"](function(e){f({event:"method-return",err:e.message})});break;case"decrypt-key":try{i.privateKey=p(i.privateKey),t=i.privateKey.decrypt(i.password),t?n=i.privateKey.toPacketlist():o="Wrong password"}catch(c){o=c.message}f({event:"method-return",data:n,err:o});break;case"decrypt-key-packet":try{i.privateKey=p(i.privateKey),i.keyIds=i.keyIds.map(window.openpgp.Keyid.fromClone),t=i.privateKey.decryptKeyPacket(i.keyIds,i.password),t?n=i.privateKey.toPacketlist():o="Wrong password"}catch(c){o=c.message}f({event:"method-return",data:n,err:o});break;default:throw new Error("Unknown Worker Event.")}}},{}]},{},[1]);